const request = require('supertest');
const { Server } = require('socket.io');
const { createServer } = require('http');
const Client = require('socket.io-client');

// Mock the main app to avoid port conflicts
jest.mock('../index.js', () => {
  const express = require('express');
  const cors = require('cors');
  const { v4: uuidv4 } = require('uuid');
  const app = express();
  
  app.use(cors());
  app.use(express.json());
  
  // In-memory data for testing
  let conversations = [
    {
      id: 'test-conversation',
      title: 'Test Conversation',
      participants: ['user1', 'user2'],
      createdAt: new Date('2024-01-01T09:00:00'),
      updatedAt: new Date('2024-01-01T10:01:00'),
      messages: [
        {
          id: 'test-message-1',
          text: 'Test message 1',
          senderId: 'user1',
          senderName: 'User One',
          timestamp: new Date('2024-01-01T10:00:00'),
          readBy: [],
          reactions: []
        }
      ]
    }
  ];
  
  let userPresence = new Map();
  
  return { app, conversations, userPresence };
});

describe('Enhanced Features Tests', () => {
  let httpServer;
  let io;
  let clientSocket;
  let serverSocket;
  
  beforeEach((done) => {
    httpServer = createServer();
    io = new Server(httpServer, {
      cors: {
        origin: "*",
        methods: ["GET", "POST"]
      }
    });
    
    httpServer.listen(() => {
      const port = httpServer.address().port;
      clientSocket = new Client(`http://localhost:${port}`, {
        forceNew: true,
        timeout: 1000
      });
      
      io.on('connection', (socket) => {
        serverSocket = socket;
        
        // Mock the enhanced features handlers
        const userPresence = new Map();
        const conversations = [
          {
            id: 'test-conversation',
            title: 'Test Conversation',
            participants: ['user1', 'user2'],
            messages: [
              {
                id: 'test-message-1',
                text: 'Test message 1',
                senderId: 'user1',
                senderName: 'User One',
                timestamp: new Date(),
                readBy: [],
                reactions: []
              }
            ]
          }
        ];
        
        // User presence handlers
        socket.on('user_online', (data) => {
          const { userId, userName, conversationId } = data;
          userPresence.set(userId, {
            userId,
            userName,
            isOnline: true,
            lastSeen: new Date(),
            socketId: socket.id,
            conversationId
          });
          
          if (conversationId) {
            socket.to(conversationId).emit('user_presence_update', {
              userId,
              userName,
              isOnline: true
            });
          }
        });
        
        // Read receipts handlers
        socket.on('mark_message_read', (data) => {
          const { messageId, conversationId, userId, userName } = data;
          
          const conversation = conversations.find(conv => conv.id === conversationId);
          if (!conversation) {
            socket.emit('error', { message: 'Conversation not found' });
            return;
          }
          
          const message = conversation.messages.find(msg => msg.id === messageId);
          if (!message) {
            socket.emit('error', { message: 'Message not found' });
            return;
          }
          
          const existingReadReceipt = message.readBy.find(receipt => receipt.userId === userId);
          if (existingReadReceipt) {
            return; // User already read this message
          }
          
          const readReceipt = {
            userId,
            userName,
            readAt: new Date()
          };
          
          message.readBy.push(readReceipt);
          
          io.to(conversationId).emit('message_read', {
            messageId,
            readReceipt
          });
        });
        
        // Message reactions handlers
        socket.on('add_reaction', (data) => {
          const { messageId, conversationId, userId, userName, emoji } = data;
          
          const conversation = conversations.find(conv => conv.id === conversationId);
          if (!conversation) {
            socket.emit('error', { message: 'Conversation not found' });
            return;
          }
          
          const message = conversation.messages.find(msg => msg.id === messageId);
          if (!message) {
            socket.emit('error', { message: 'Message not found' });
            return;
          }
          
          // Check if user already has any reaction (only one emoji allowed per user)
          const existingUserReaction = message.reactions.find(
            reaction => reaction.userId === userId
          );
          
          if (existingUserReaction) {
            // If user is trying to react with the same emoji, remove it (toggle)
            if (existingUserReaction.emoji === emoji) {
              message.reactions = message.reactions.filter(r => r.id !== existingUserReaction.id);
              
              // Broadcast reaction removal
              io.to(conversationId).emit('reaction_removed', {
                messageId,
                reactionId: existingUserReaction.id,
                userId
              });
              return;
            } else {
              // If user is trying to react with a different emoji, replace the existing one
              message.reactions = message.reactions.filter(r => r.id !== existingUserReaction.id);
              
              // Broadcast old reaction removal
              io.to(conversationId).emit('reaction_removed', {
                messageId,
                reactionId: existingUserReaction.id,
                userId
              });
            }
          }
          
          const reaction = {
            id: `reaction-${Date.now()}`,
            userId,
            userName,
            emoji,
            timestamp: new Date()
          };
          
          message.reactions.push(reaction);
          
          io.to(conversationId).emit('reaction_added', {
            messageId,
            reaction
          });
        });
        
        socket.on('remove_reaction', (data) => {
          const { messageId, conversationId, userId, reactionId } = data;
          
          const conversation = conversations.find(conv => conv.id === conversationId);
          if (!conversation) {
            socket.emit('error', { message: 'Conversation not found' });
            return;
          }
          
          const message = conversation.messages.find(msg => msg.id === messageId);
          if (!message) {
            socket.emit('error', { message: 'Message not found' });
            return;
          }
          
          const reactionIndex = message.reactions.findIndex(
            reaction => reaction.id === reactionId && reaction.userId === userId
          );
          
          if (reactionIndex === -1) {
            socket.emit('error', { message: 'Reaction not found' });
            return;
          }
          
          message.reactions.splice(reactionIndex, 1);
          
          io.to(conversationId).emit('reaction_removed', {
            messageId,
            reactionId,
            userId
          });
        });
        
        socket.on('disconnect', () => {
          // Update user presence on disconnect
          for (const [userId, presence] of userPresence.entries()) {
            if (presence.socketId === socket.id) {
              presence.isOnline = false;
              presence.lastSeen = new Date();
              
              if (presence.conversationId) {
                socket.to(presence.conversationId).emit('user_presence_update', {
                  userId,
                  userName: presence.userName,
                  isOnline: false,
                  lastSeen: presence.lastSeen
                });
              }
              break;
            }
          }
        });
      });
      
      clientSocket.on('connect', done);
      clientSocket.on('connect_error', (error) => {
        console.error('Client connection error:', error);
        done(error);
      });
    });
  });
  
  afterEach((done) => {
    if (clientSocket && clientSocket.connected) {
      clientSocket.disconnect();
    }
    if (io) {
      io.close();
    }
    if (httpServer) {
      httpServer.close(done);
    } else {
      done();
    }
  });
  
  describe('User Presence', () => {
    it('should emit user_online event and receive presence update', (done) => {
      const testData = {
        userId: 'test-user-1',
        userName: 'Test User 1',
        conversationId: 'test-conversation'
      };
      
      clientSocket.on('user_presence_update', (data) => {
        expect(data.userId).toBe(testData.userId);
        expect(data.userName).toBe(testData.userName);
        expect(data.isOnline).toBe(true);
        done();
      });
      
      // Create a second client to receive the presence update
      const clientSocket2 = new Client(`http://localhost:${httpServer.address().port}`, {
        forceNew: true,
        timeout: 1000
      });
      
      clientSocket2.on('connect', () => {
        clientSocket2.emit('join_conversation', testData.conversationId);
        
        setTimeout(() => {
          clientSocket.emit('user_online', testData);
        }, 100);
      });
      
      // Clean up second client after test
      setTimeout(() => {
        if (clientSocket2 && clientSocket2.connected) {
          clientSocket2.disconnect();
        }
      }, 2000);
    });
    
    it('should update user presence to offline on disconnect', (done) => {
      const testData = {
        userId: 'test-user-2',
        userName: 'Test User 2',
        conversationId: 'test-conversation'
      };
      
      // Create a second client to receive the presence update
      const clientSocket2 = new Client(`http://localhost:${httpServer.address().port}`, {
        forceNew: true,
        timeout: 1000
      });
      
      clientSocket2.on('connect', () => {
        clientSocket2.emit('join_conversation', testData.conversationId);
        
        clientSocket2.on('user_presence_update', (data) => {
          if (!data.isOnline) {
            expect(data.userId).toBe(testData.userId);
            expect(data.userName).toBe(testData.userName);
            expect(data.isOnline).toBe(false);
            expect(data.lastSeen).toBeDefined();
            clientSocket2.disconnect();
            done();
          }
        });
        
        // First client goes online
        clientSocket.emit('user_online', testData);
        
        // Then disconnect to trigger offline status
        setTimeout(() => {
          clientSocket.disconnect();
        }, 100);
      });
    });
  });
  
  describe('Read Receipts', () => {
    it('should mark message as read and emit read receipt', (done) => {
      const testData = {
        messageId: 'test-message-1',
        conversationId: 'test-conversation',
        userId: 'test-user-1',
        userName: 'Test User 1'
      };
      
      clientSocket.on('message_read', (data) => {
        expect(data.messageId).toBe(testData.messageId);
        expect(data.readReceipt.userId).toBe(testData.userId);
        expect(data.readReceipt.userName).toBe(testData.userName);
        expect(data.readReceipt.readAt).toBeDefined();
        done();
      });
      
      clientSocket.emit('join_conversation', testData.conversationId);
      
      setTimeout(() => {
        clientSocket.emit('mark_message_read', testData);
      }, 100);
    });
    
    it('should not duplicate read receipts for same user', (done) => {
      const testData = {
        messageId: 'test-message-1',
        conversationId: 'test-conversation',
        userId: 'test-user-1',
        userName: 'Test User 1'
      };
      
      let readReceiptCount = 0;
      
      clientSocket.on('message_read', (data) => {
        readReceiptCount++;
        if (readReceiptCount === 1) {
          expect(data.messageId).toBe(testData.messageId);
          
          // Try to mark the same message as read again
          setTimeout(() => {
            clientSocket.emit('mark_message_read', testData);
          }, 100);
          
          // Should not receive another read receipt
          setTimeout(() => {
            expect(readReceiptCount).toBe(1);
            done();
          }, 200);
        }
      });
      
      clientSocket.emit('join_conversation', testData.conversationId);
      
      setTimeout(() => {
        clientSocket.emit('mark_message_read', testData);
      }, 100);
    });
  });
  
  describe('Message Reactions', () => {
    it('should add reaction and emit reaction_added event', (done) => {
      const testData = {
        messageId: 'test-message-1',
        conversationId: 'test-conversation',
        userId: 'test-user-1',
        userName: 'Test User 1',
        emoji: '👍'
      };
      
      clientSocket.on('reaction_added', (data) => {
        expect(data.messageId).toBe(testData.messageId);
        expect(data.reaction.userId).toBe(testData.userId);
        expect(data.reaction.userName).toBe(testData.userName);
        expect(data.reaction.emoji).toBe(testData.emoji);
        expect(data.reaction.id).toBeDefined();
        expect(data.reaction.timestamp).toBeDefined();
        done();
      });
      
      clientSocket.emit('join_conversation', testData.conversationId);
      
      setTimeout(() => {
        clientSocket.emit('add_reaction', testData);
      }, 100);
    });
    
    it('should remove reaction and emit reaction_removed event', (done) => {
      const addReactionData = {
        messageId: 'test-message-1',
        conversationId: 'test-conversation',
        userId: 'test-user-1',
        userName: 'Test User 1',
        emoji: '👍'
      };
      
      let reactionId;
      
      clientSocket.on('reaction_added', (data) => {
        reactionId = data.reaction.id;
        
        // Now remove the reaction
        const removeData = {
          messageId: addReactionData.messageId,
          conversationId: addReactionData.conversationId,
          userId: addReactionData.userId,
          reactionId: reactionId
        };
        
        setTimeout(() => {
          clientSocket.emit('remove_reaction', removeData);
        }, 100);
      });
      
      clientSocket.on('reaction_removed', (data) => {
        expect(data.messageId).toBe(addReactionData.messageId);
        expect(data.reactionId).toBe(reactionId);
        expect(data.userId).toBe(addReactionData.userId);
        done();
      });
      
      clientSocket.emit('join_conversation', addReactionData.conversationId);
      
      setTimeout(() => {
        clientSocket.emit('add_reaction', addReactionData);
      }, 100);
    });
    
    it('should allow only one emoji per user and replace existing reaction', (done) => {
      const testData = {
        messageId: 'test-message-1',
        conversationId: 'test-conversation',
        userId: 'test-user-1',
        userName: 'Test User 1',
        emoji: '👍'
      };
      
      let events = [];
      
      clientSocket.on('reaction_added', (data) => {
        events.push({ type: 'added', data });
      });
      
      clientSocket.on('reaction_removed', (data) => {
        events.push({ type: 'removed', data });
      });
      
      clientSocket.emit('join_conversation', testData.conversationId);
      
      // First reaction
      setTimeout(() => {
        clientSocket.emit('add_reaction', testData);
      }, 100);
      
      // Second reaction with different emoji (should replace first)
      setTimeout(() => {
        clientSocket.emit('add_reaction', {
          ...testData,
          emoji: '❤️'
        });
      }, 200);
      
      // Verify events after both reactions
      setTimeout(() => {
        expect(events).toHaveLength(3); // added, removed, added
        expect(events[0].type).toBe('added');
        expect(events[0].data.reaction.emoji).toBe('👍');
        expect(events[1].type).toBe('removed');
        expect(events[2].type).toBe('added');
        expect(events[2].data.reaction.emoji).toBe('❤️');
        done();
      }, 300);
    });
    
    it('should not duplicate reactions for same user and emoji', (done) => {
      const testData = {
        messageId: 'test-message-1',
        conversationId: 'test-conversation',
        userId: 'test-user-1',
        userName: 'Test User 1',
        emoji: '👍'
      };
      
      let reactionCount = 0;
      
      clientSocket.on('reaction_added', (data) => {
        reactionCount++;
        if (reactionCount === 1) {
          expect(data.messageId).toBe(testData.messageId);
          
          // Try to add the same reaction again
          setTimeout(() => {
            clientSocket.emit('add_reaction', testData);
          }, 100);
          
          // Should not receive another reaction_added event
          setTimeout(() => {
            expect(reactionCount).toBe(1);
            done();
          }, 200);
        }
      });
      
      clientSocket.emit('join_conversation', testData.conversationId);
      
      setTimeout(() => {
        clientSocket.emit('add_reaction', testData);
      }, 100);
    });
  });
  
  describe('Error Handling', () => {
    it('should handle read receipt for non-existent message', (done) => {
      const testData = {
        messageId: 'non-existent-message',
        conversationId: 'test-conversation',
        userId: 'test-user-1',
        userName: 'Test User 1'
      };
      
      clientSocket.on('error', (data) => {
        expect(data.message).toBe('Message not found');
        done();
      });
      
      clientSocket.emit('join_conversation', testData.conversationId);
      
      setTimeout(() => {
        clientSocket.emit('mark_message_read', testData);
      }, 100);
    });
    
    it('should handle reaction for non-existent conversation', (done) => {
      const testData = {
        messageId: 'test-message-1',
        conversationId: 'non-existent-conversation',
        userId: 'test-user-1',
        userName: 'Test User 1',
        emoji: '👍'
      };
      
      clientSocket.on('error', (data) => {
        expect(data.message).toBe('Conversation not found');
        done();
      });
      
      clientSocket.emit('add_reaction', testData);
    });
  });
});